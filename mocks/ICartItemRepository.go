// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	BusinessObjects "th3y3m/e-commerce-platform/BusinessObjects"

	Util "th3y3m/e-commerce-platform/Util"

	mock "github.com/stretchr/testify/mock"
)

// ICartItemRepository is an autogenerated mock type for the ICartItemRepository type
type ICartItemRepository struct {
	mock.Mock
}

// CreateCartItem provides a mock function with given fields: cartItem
func (_m *ICartItemRepository) CreateCartItem(cartItem BusinessObjects.CartItem) error {
	ret := _m.Called(cartItem)

	if len(ret) == 0 {
		panic("no return value specified for CreateCartItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(BusinessObjects.CartItem) error); ok {
		r0 = rf(cartItem)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCartItem provides a mock function with given fields: cartID, productID
func (_m *ICartItemRepository) DeleteCartItem(cartID string, productID string) error {
	ret := _m.Called(cartID, productID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCartItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(cartID, productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllCartItems provides a mock function with given fields:
func (_m *ICartItemRepository) GetAllCartItems() ([]BusinessObjects.CartItem, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllCartItems")
	}

	var r0 []BusinessObjects.CartItem
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]BusinessObjects.CartItem, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []BusinessObjects.CartItem); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]BusinessObjects.CartItem)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCartItemByCartID provides a mock function with given fields: cartItemID
func (_m *ICartItemRepository) GetCartItemByCartID(cartItemID string) ([]BusinessObjects.CartItem, error) {
	ret := _m.Called(cartItemID)

	if len(ret) == 0 {
		panic("no return value specified for GetCartItemByCartID")
	}

	var r0 []BusinessObjects.CartItem
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]BusinessObjects.CartItem, error)); ok {
		return rf(cartItemID)
	}
	if rf, ok := ret.Get(0).(func(string) []BusinessObjects.CartItem); ok {
		r0 = rf(cartItemID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]BusinessObjects.CartItem)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(cartItemID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaginatedCartItemList provides a mock function with given fields: searchValue, sortBy, cartId, productId, pageIndex, pageSize
func (_m *ICartItemRepository) GetPaginatedCartItemList(searchValue string, sortBy string, cartId string, productId string, pageIndex int, pageSize int) (Util.PaginatedList[BusinessObjects.CartItem], error) {
	ret := _m.Called(searchValue, sortBy, cartId, productId, pageIndex, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for GetPaginatedCartItemList")
	}

	var r0 Util.PaginatedList[BusinessObjects.CartItem]
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, int, int) (Util.PaginatedList[BusinessObjects.CartItem], error)); ok {
		return rf(searchValue, sortBy, cartId, productId, pageIndex, pageSize)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, int, int) Util.PaginatedList[BusinessObjects.CartItem]); ok {
		r0 = rf(searchValue, sortBy, cartId, productId, pageIndex, pageSize)
	} else {
		r0 = ret.Get(0).(Util.PaginatedList[BusinessObjects.CartItem])
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, int, int) error); ok {
		r1 = rf(searchValue, sortBy, cartId, productId, pageIndex, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCartItem provides a mock function with given fields: cartItem
func (_m *ICartItemRepository) UpdateCartItem(cartItem BusinessObjects.CartItem) error {
	ret := _m.Called(cartItem)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCartItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(BusinessObjects.CartItem) error); ok {
		r0 = rf(cartItem)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOrCreateCartItem provides a mock function with given fields: cartItem
func (_m *ICartItemRepository) UpdateOrCreateCartItem(cartItem BusinessObjects.CartItem) error {
	ret := _m.Called(cartItem)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrCreateCartItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(BusinessObjects.CartItem) error); ok {
		r0 = rf(cartItem)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewICartItemRepository creates a new instance of ICartItemRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICartItemRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICartItemRepository {
	mock := &ICartItemRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
