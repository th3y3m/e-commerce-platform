// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	BusinessObjects "th3y3m/e-commerce-platform/BusinessObjects"

	Util "th3y3m/e-commerce-platform/Util"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// IOrderService is an autogenerated mock type for the IOrderService type
type IOrderService struct {
	mock.Mock
}

// CancelOrder provides a mock function with given fields: orderID
func (_m *IOrderService) CancelOrder(orderID string) error {
	ret := _m.Called(orderID)

	if len(ret) == 0 {
		panic("no return value specified for CancelOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(orderID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConsumeInventoryUpdates provides a mock function with given fields:
func (_m *IOrderService) ConsumeInventoryUpdates() {
	_m.Called()
}

// ConsumeMailNotifycation provides a mock function with given fields:
func (_m *IOrderService) ConsumeMailNotifycation() {
	_m.Called()
}

// CreateOrder provides a mock function with given fields: order
func (_m *IOrderService) CreateOrder(order BusinessObjects.NewOrder) (BusinessObjects.Order, error) {
	ret := _m.Called(order)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 BusinessObjects.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(BusinessObjects.NewOrder) (BusinessObjects.Order, error)); ok {
		return rf(order)
	}
	if rf, ok := ret.Get(0).(func(BusinessObjects.NewOrder) BusinessObjects.Order); ok {
		r0 = rf(order)
	} else {
		r0 = ret.Get(0).(BusinessObjects.Order)
	}

	if rf, ok := ret.Get(1).(func(BusinessObjects.NewOrder) error); ok {
		r1 = rf(order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllOrders provides a mock function with given fields:
func (_m *IOrderService) GetAllOrders() ([]BusinessObjects.Order, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllOrders")
	}

	var r0 []BusinessObjects.Order
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]BusinessObjects.Order, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []BusinessObjects.Order); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]BusinessObjects.Order)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderById provides a mock function with given fields: orderID
func (_m *IOrderService) GetOrderById(orderID string) (BusinessObjects.Order, error) {
	ret := _m.Called(orderID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderById")
	}

	var r0 BusinessObjects.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (BusinessObjects.Order, error)); ok {
		return rf(orderID)
	}
	if rf, ok := ret.Get(0).(func(string) BusinessObjects.Order); ok {
		r0 = rf(orderID)
	} else {
		r0 = ret.Get(0).(BusinessObjects.Order)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaginatedOrderList provides a mock function with given fields: sortBy, orderID, customerId, courierId, voucherId, pageIndex, pageSize, startDate, endDate, minPrice, maxPrice, status
func (_m *IOrderService) GetPaginatedOrderList(sortBy string, orderID string, customerId string, courierId string, voucherId string, pageIndex int, pageSize int, startDate *time.Time, endDate *time.Time, minPrice *float64, maxPrice *float64, status string) (Util.PaginatedList[BusinessObjects.Order], error) {
	ret := _m.Called(sortBy, orderID, customerId, courierId, voucherId, pageIndex, pageSize, startDate, endDate, minPrice, maxPrice, status)

	if len(ret) == 0 {
		panic("no return value specified for GetPaginatedOrderList")
	}

	var r0 Util.PaginatedList[BusinessObjects.Order]
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, int, int, *time.Time, *time.Time, *float64, *float64, string) (Util.PaginatedList[BusinessObjects.Order], error)); ok {
		return rf(sortBy, orderID, customerId, courierId, voucherId, pageIndex, pageSize, startDate, endDate, minPrice, maxPrice, status)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, int, int, *time.Time, *time.Time, *float64, *float64, string) Util.PaginatedList[BusinessObjects.Order]); ok {
		r0 = rf(sortBy, orderID, customerId, courierId, voucherId, pageIndex, pageSize, startDate, endDate, minPrice, maxPrice, status)
	} else {
		r0 = ret.Get(0).(Util.PaginatedList[BusinessObjects.Order])
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, string, int, int, *time.Time, *time.Time, *float64, *float64, string) error); ok {
		r1 = rf(sortBy, orderID, customerId, courierId, voucherId, pageIndex, pageSize, startDate, endDate, minPrice, maxPrice, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlaceOrder provides a mock function with given fields: userId, cartId, shipAddress, CourierID, VoucherID, paymentMethod
func (_m *IOrderService) PlaceOrder(userId string, cartId string, shipAddress string, CourierID string, VoucherID string, paymentMethod string) (string, error) {
	ret := _m.Called(userId, cartId, shipAddress, CourierID, VoucherID, paymentMethod)

	if len(ret) == 0 {
		panic("no return value specified for PlaceOrder")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string) (string, error)); ok {
		return rf(userId, cartId, shipAddress, CourierID, VoucherID, paymentMethod)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string) string); ok {
		r0 = rf(userId, cartId, shipAddress, CourierID, VoucherID, paymentMethod)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, string, string) error); ok {
		r1 = rf(userId, cartId, shipAddress, CourierID, VoucherID, paymentMethod)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessOrder provides a mock function with given fields: userId, cartId, shipAddress, CourierID, VoucherID, paymentMethod
func (_m *IOrderService) ProcessOrder(userId string, cartId string, shipAddress string, CourierID string, VoucherID string, paymentMethod string) (BusinessObjects.Order, error) {
	ret := _m.Called(userId, cartId, shipAddress, CourierID, VoucherID, paymentMethod)

	if len(ret) == 0 {
		panic("no return value specified for ProcessOrder")
	}

	var r0 BusinessObjects.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string) (BusinessObjects.Order, error)); ok {
		return rf(userId, cartId, shipAddress, CourierID, VoucherID, paymentMethod)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string) BusinessObjects.Order); ok {
		r0 = rf(userId, cartId, shipAddress, CourierID, VoucherID, paymentMethod)
	} else {
		r0 = ret.Get(0).(BusinessObjects.Order)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, string, string) error); ok {
		r1 = rf(userId, cartId, shipAddress, CourierID, VoucherID, paymentMethod)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessPayment provides a mock function with given fields: order
func (_m *IOrderService) ProcessPayment(order BusinessObjects.Order) (string, error) {
	ret := _m.Called(order)

	if len(ret) == 0 {
		panic("no return value specified for ProcessPayment")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(BusinessObjects.Order) (string, error)); ok {
		return rf(order)
	}
	if rf, ok := ret.Get(0).(func(BusinessObjects.Order) string); ok {
		r0 = rf(order)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(BusinessObjects.Order) error); ok {
		r1 = rf(order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublishInventoryUpdateEvent provides a mock function with given fields: userId, cartId
func (_m *IOrderService) PublishInventoryUpdateEvent(userId string, cartId string) error {
	ret := _m.Called(userId, cartId)

	if len(ret) == 0 {
		panic("no return value specified for PublishInventoryUpdateEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userId, cartId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublishOrderNotificationEvent provides a mock function with given fields: orderId
func (_m *IOrderService) PublishOrderNotificationEvent(orderId string) error {
	ret := _m.Called(orderId)

	if len(ret) == 0 {
		panic("no return value specified for PublishOrderNotificationEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(orderId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendNotification provides a mock function with given fields: orderID
func (_m *IOrderService) SendNotification(orderID string) error {
	ret := _m.Called(orderID)

	if len(ret) == 0 {
		panic("no return value specified for SendNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(orderID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateInventory provides a mock function with given fields: userId, cartId
func (_m *IOrderService) UpdateInventory(userId string, cartId string) error {
	ret := _m.Called(userId, cartId)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInventory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userId, cartId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOrder provides a mock function with given fields: order
func (_m *IOrderService) UpdateOrder(order BusinessObjects.Order) error {
	ret := _m.Called(order)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(BusinessObjects.Order) error); ok {
		r0 = rf(order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIOrderService creates a new instance of IOrderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIOrderService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IOrderService {
	mock := &IOrderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
