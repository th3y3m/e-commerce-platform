// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	BusinessObjects "th3y3m/e-commerce-platform/BusinessObjects"

	Util "th3y3m/e-commerce-platform/Util"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// INewsService is an autogenerated mock type for the INewsService type
type INewsService struct {
	mock.Mock
}

// CreateNews provides a mock function with given fields: ctx, title, content, authorID, category, ImageURL
func (_m *INewsService) CreateNews(ctx context.Context, title string, content string, authorID string, category string, ImageURL string) error {
	ret := _m.Called(ctx, title, content, authorID, category, ImageURL)

	if len(ret) == 0 {
		panic("no return value specified for CreateNews")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string) error); ok {
		r0 = rf(ctx, title, content, authorID, category, ImageURL)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteNews provides a mock function with given fields: ctx, newsID
func (_m *INewsService) DeleteNews(ctx context.Context, newsID string) error {
	ret := _m.Called(ctx, newsID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNews")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, newsID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllNews provides a mock function with given fields: ctx
func (_m *INewsService) GetAllNews(ctx context.Context) ([]BusinessObjects.News, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllNews")
	}

	var r0 []BusinessObjects.News
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]BusinessObjects.News, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []BusinessObjects.News); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]BusinessObjects.News)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNewsByID provides a mock function with given fields: ctx, newsID
func (_m *INewsService) GetNewsByID(ctx context.Context, newsID string) (BusinessObjects.News, error) {
	ret := _m.Called(ctx, newsID)

	if len(ret) == 0 {
		panic("no return value specified for GetNewsByID")
	}

	var r0 BusinessObjects.News
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (BusinessObjects.News, error)); ok {
		return rf(ctx, newsID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) BusinessObjects.News); ok {
		r0 = rf(ctx, newsID)
	} else {
		r0 = ret.Get(0).(BusinessObjects.News)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, newsID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaginatedNewsList provides a mock function with given fields: ctx, searchValue, sortBy, newId, authorID, pageIndex, pageSize, status
func (_m *INewsService) GetPaginatedNewsList(ctx context.Context, searchValue string, sortBy string, newId string, authorID string, pageIndex int, pageSize int, status *bool) (Util.PaginatedList[BusinessObjects.News], error) {
	ret := _m.Called(ctx, searchValue, sortBy, newId, authorID, pageIndex, pageSize, status)

	if len(ret) == 0 {
		panic("no return value specified for GetPaginatedNewsList")
	}

	var r0 Util.PaginatedList[BusinessObjects.News]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, int, int, *bool) (Util.PaginatedList[BusinessObjects.News], error)); ok {
		return rf(ctx, searchValue, sortBy, newId, authorID, pageIndex, pageSize, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, int, int, *bool) Util.PaginatedList[BusinessObjects.News]); ok {
		r0 = rf(ctx, searchValue, sortBy, newId, authorID, pageIndex, pageSize, status)
	} else {
		r0 = ret.Get(0).(Util.PaginatedList[BusinessObjects.News])
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, int, int, *bool) error); ok {
		r1 = rf(ctx, searchValue, sortBy, newId, authorID, pageIndex, pageSize, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNews provides a mock function with given fields: ctx, newsId, title, content, authorID, category, ImageURL
func (_m *INewsService) UpdateNews(ctx context.Context, newsId string, title string, content string, authorID string, category string, ImageURL string) error {
	ret := _m.Called(ctx, newsId, title, content, authorID, category, ImageURL)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNews")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string, string) error); ok {
		r0 = rf(ctx, newsId, title, content, authorID, category, ImageURL)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewINewsService creates a new instance of INewsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewINewsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *INewsService {
	mock := &INewsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
