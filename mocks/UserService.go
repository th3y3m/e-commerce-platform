// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	BusinessObjects "th3y3m/e-commerce-platform/BusinessObjects"

	Util "th3y3m/e-commerce-platform/Util"

	mock "github.com/stretchr/testify/mock"
)

// IUserService is an autogenerated mock type for the IUserService type
type IUserService struct {
	mock.Mock
}

// BanUser provides a mock function with given fields: id
func (_m *IUserService) BanUser(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for BanUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: email, password, role
func (_m *IUserService) CreateUser(email string, password string, role string) (BusinessObjects.User, error) {
	ret := _m.Called(email, password, role)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 BusinessObjects.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (BusinessObjects.User, error)); ok {
		return rf(email, password, role)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) BusinessObjects.User); ok {
		r0 = rf(email, password, role)
	} else {
		r0 = ret.Get(0).(BusinessObjects.User)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(email, password, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllUsers provides a mock function with given fields:
func (_m *IUserService) GetAllUsers() ([]BusinessObjects.User, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 []BusinessObjects.User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]BusinessObjects.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []BusinessObjects.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]BusinessObjects.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaginatedUserList provides a mock function with given fields: searchValue, sortBy, pageIndex, pageSize, status
func (_m *IUserService) GetPaginatedUserList(searchValue string, sortBy string, pageIndex int, pageSize int, status *bool) (Util.PaginatedList[BusinessObjects.User], error) {
	ret := _m.Called(searchValue, sortBy, pageIndex, pageSize, status)

	if len(ret) == 0 {
		panic("no return value specified for GetPaginatedUserList")
	}

	var r0 Util.PaginatedList[BusinessObjects.User]
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int, int, *bool) (Util.PaginatedList[BusinessObjects.User], error)); ok {
		return rf(searchValue, sortBy, pageIndex, pageSize, status)
	}
	if rf, ok := ret.Get(0).(func(string, string, int, int, *bool) Util.PaginatedList[BusinessObjects.User]); ok {
		r0 = rf(searchValue, sortBy, pageIndex, pageSize, status)
	} else {
		r0 = ret.Get(0).(Util.PaginatedList[BusinessObjects.User])
	}

	if rf, ok := ret.Get(1).(func(string, string, int, int, *bool) error); ok {
		r1 = rf(searchValue, sortBy, pageIndex, pageSize, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: userID
func (_m *IUserService) GetUserByID(userID string) (BusinessObjects.User, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 BusinessObjects.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (BusinessObjects.User, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) BusinessObjects.User); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(BusinessObjects.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnBanUser provides a mock function with given fields: id
func (_m *IUserService) UnBanUser(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for UnBanUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProfile provides a mock function with given fields: id, fullname, phonenumber, address, ImageURL
func (_m *IUserService) UpdateProfile(id string, fullname string, phonenumber string, address string, ImageURL string) error {
	ret := _m.Called(id, fullname, phonenumber, address, ImageURL)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) error); ok {
		r0 = rf(id, fullname, phonenumber, address, ImageURL)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIUserService creates a new instance of IUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserService {
	mock := &IUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
