// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	BusinessObjects "th3y3m/e-commerce-platform/BusinessObjects"

	Util "th3y3m/e-commerce-platform/Util"

	mock "github.com/stretchr/testify/mock"
)

// IProductDiscountService is an autogenerated mock type for the IProductDiscountService type
type IProductDiscountService struct {
	mock.Mock
}

// CreateProductDiscount provides a mock function with given fields: productID, discountID, discount
func (_m *IProductDiscountService) CreateProductDiscount(productID string, discountID string) error {
	ret := _m.Called(productID, discountID)

	if len(ret) == 0 {
		panic("no return value specified for CreateProductDiscount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(productID, discountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProductDiscount provides a mock function with given fields: productID
func (_m *IProductDiscountService) DeleteProductDiscount(productID string) error {
	ret := _m.Called(productID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProductDiscount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllProductDiscounts provides a mock function with given fields:
func (_m *IProductDiscountService) GetAllProductDiscounts() ([]BusinessObjects.ProductDiscount, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllProductDiscounts")
	}

	var r0 []BusinessObjects.ProductDiscount
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]BusinessObjects.ProductDiscount, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []BusinessObjects.ProductDiscount); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]BusinessObjects.ProductDiscount)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaginatedProductDiscountList provides a mock function with given fields: discountID, sortBy, productID, pageIndex, pageSize
func (_m *IProductDiscountService) GetPaginatedProductDiscountList(discountID string, sortBy string, productID string, pageIndex int, pageSize int) (Util.PaginatedList[BusinessObjects.ProductDiscount], error) {
	ret := _m.Called(discountID, sortBy, productID, pageIndex, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for GetPaginatedProductDiscountList")
	}

	var r0 Util.PaginatedList[BusinessObjects.ProductDiscount]
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, int, int) (Util.PaginatedList[BusinessObjects.ProductDiscount], error)); ok {
		return rf(discountID, sortBy, productID, pageIndex, pageSize)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, int, int) Util.PaginatedList[BusinessObjects.ProductDiscount]); ok {
		r0 = rf(discountID, sortBy, productID, pageIndex, pageSize)
	} else {
		r0 = ret.Get(0).(Util.PaginatedList[BusinessObjects.ProductDiscount])
	}

	if rf, ok := ret.Get(1).(func(string, string, string, int, int) error); ok {
		r1 = rf(discountID, sortBy, productID, pageIndex, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductDiscountByID provides a mock function with given fields: productID
func (_m *IProductDiscountService) GetProductDiscountByID(productID string) ([]BusinessObjects.ProductDiscount, error) {
	ret := _m.Called(productID)

	if len(ret) == 0 {
		panic("no return value specified for GetProductDiscountByID")
	}

	var r0 []BusinessObjects.ProductDiscount
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]BusinessObjects.ProductDiscount, error)); ok {
		return rf(productID)
	}
	if rf, ok := ret.Get(0).(func(string) []BusinessObjects.ProductDiscount); ok {
		r0 = rf(productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]BusinessObjects.ProductDiscount)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductsOfDiscount provides a mock function with given fields: discountID
func (_m *IProductDiscountService) GetProductsOfDiscount(discountID string) ([]BusinessObjects.ProductDiscount, error) {
	ret := _m.Called(discountID)

	if len(ret) == 0 {
		panic("no return value specified for GetProductsOfDiscount")
	}

	var r0 []BusinessObjects.ProductDiscount
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]BusinessObjects.ProductDiscount, error)); ok {
		return rf(discountID)
	}
	if rf, ok := ret.Get(0).(func(string) []BusinessObjects.ProductDiscount); ok {
		r0 = rf(discountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]BusinessObjects.ProductDiscount)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(discountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProductDiscount provides a mock function with given fields: rate
func (_m *IProductDiscountService) UpdateProductDiscount(rate BusinessObjects.ProductDiscount) error {
	ret := _m.Called(rate)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProductDiscount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(BusinessObjects.ProductDiscount) error); ok {
		r0 = rf(rate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIProductDiscountService creates a new instance of IProductDiscountService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIProductDiscountService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IProductDiscountService {
	mock := &IProductDiscountService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
