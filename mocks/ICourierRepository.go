// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	BusinessObjects "th3y3m/e-commerce-platform/BusinessObjects"

	Util "th3y3m/e-commerce-platform/Util"

	mock "github.com/stretchr/testify/mock"
)

// ICourierRepository is an autogenerated mock type for the ICourierRepository type
type ICourierRepository struct {
	mock.Mock
}

// CreateCourier provides a mock function with given fields: courier
func (_m *ICourierRepository) CreateCourier(courier BusinessObjects.Courier) error {
	ret := _m.Called(courier)

	if len(ret) == 0 {
		panic("no return value specified for CreateCourier")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(BusinessObjects.Courier) error); ok {
		r0 = rf(courier)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCourier provides a mock function with given fields: courierID
func (_m *ICourierRepository) DeleteCourier(courierID string) error {
	ret := _m.Called(courierID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCourier")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(courierID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllCouriers provides a mock function with given fields:
func (_m *ICourierRepository) GetAllCouriers() ([]BusinessObjects.Courier, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllCouriers")
	}

	var r0 []BusinessObjects.Courier
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]BusinessObjects.Courier, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []BusinessObjects.Courier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]BusinessObjects.Courier)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCourierByID provides a mock function with given fields: courierID
func (_m *ICourierRepository) GetCourierByID(courierID string) (BusinessObjects.Courier, error) {
	ret := _m.Called(courierID)

	if len(ret) == 0 {
		panic("no return value specified for GetCourierByID")
	}

	var r0 BusinessObjects.Courier
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (BusinessObjects.Courier, error)); ok {
		return rf(courierID)
	}
	if rf, ok := ret.Get(0).(func(string) BusinessObjects.Courier); ok {
		r0 = rf(courierID)
	} else {
		r0 = ret.Get(0).(BusinessObjects.Courier)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(courierID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaginatedCourierList provides a mock function with given fields: searchValue, sortBy, pageIndex, pageSize, status
func (_m *ICourierRepository) GetPaginatedCourierList(searchValue string, sortBy string, pageIndex int, pageSize int, status *bool) (Util.PaginatedList[BusinessObjects.Courier], error) {
	ret := _m.Called(searchValue, sortBy, pageIndex, pageSize, status)

	if len(ret) == 0 {
		panic("no return value specified for GetPaginatedCourierList")
	}

	var r0 Util.PaginatedList[BusinessObjects.Courier]
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int, int, *bool) (Util.PaginatedList[BusinessObjects.Courier], error)); ok {
		return rf(searchValue, sortBy, pageIndex, pageSize, status)
	}
	if rf, ok := ret.Get(0).(func(string, string, int, int, *bool) Util.PaginatedList[BusinessObjects.Courier]); ok {
		r0 = rf(searchValue, sortBy, pageIndex, pageSize, status)
	} else {
		r0 = ret.Get(0).(Util.PaginatedList[BusinessObjects.Courier])
	}

	if rf, ok := ret.Get(1).(func(string, string, int, int, *bool) error); ok {
		r1 = rf(searchValue, sortBy, pageIndex, pageSize, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCourier provides a mock function with given fields: courier
func (_m *ICourierRepository) UpdateCourier(courier BusinessObjects.Courier) error {
	ret := _m.Called(courier)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCourier")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(BusinessObjects.Courier) error); ok {
		r0 = rf(courier)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewICourierRepository creates a new instance of ICourierRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICourierRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICourierRepository {
	mock := &ICourierRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
