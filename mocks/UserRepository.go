// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	BusinessObjects "th3y3m/e-commerce-platform/BusinessObjects"

	Util "th3y3m/e-commerce-platform/Util"

	mock "github.com/stretchr/testify/mock"
)

// IUserRepository is an autogenerated mock type for the IUserRepository type
type IUserRepository struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: user
func (_m *IUserRepository) CreateUser(user BusinessObjects.User) (BusinessObjects.User, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 BusinessObjects.User
	var r1 error
	if rf, ok := ret.Get(0).(func(BusinessObjects.User) (BusinessObjects.User, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(BusinessObjects.User) BusinessObjects.User); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(BusinessObjects.User)
	}

	if rf, ok := ret.Get(1).(func(BusinessObjects.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: userID
func (_m *IUserRepository) DeleteUser(userID string) error {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllUsers provides a mock function with given fields:
func (_m *IUserRepository) GetAllUsers() ([]BusinessObjects.User, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 []BusinessObjects.User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]BusinessObjects.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []BusinessObjects.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]BusinessObjects.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaginatedUserList provides a mock function with given fields: searchValue, sortBy, pageIndex, pageSize, status
func (_m *IUserRepository) GetPaginatedUserList(searchValue string, sortBy string, pageIndex int, pageSize int, status *bool) (Util.PaginatedList[BusinessObjects.User], error) {
	ret := _m.Called(searchValue, sortBy, pageIndex, pageSize, status)

	if len(ret) == 0 {
		panic("no return value specified for GetPaginatedUserList")
	}

	var r0 Util.PaginatedList[BusinessObjects.User]
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int, int, *bool) (Util.PaginatedList[BusinessObjects.User], error)); ok {
		return rf(searchValue, sortBy, pageIndex, pageSize, status)
	}
	if rf, ok := ret.Get(0).(func(string, string, int, int, *bool) Util.PaginatedList[BusinessObjects.User]); ok {
		r0 = rf(searchValue, sortBy, pageIndex, pageSize, status)
	} else {
		r0 = ret.Get(0).(Util.PaginatedList[BusinessObjects.User])
	}

	if rf, ok := ret.Get(1).(func(string, string, int, int, *bool) error); ok {
		r1 = rf(searchValue, sortBy, pageIndex, pageSize, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmail provides a mock function with given fields: email
func (_m *IUserRepository) GetUserByEmail(email string) (BusinessObjects.User, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 BusinessObjects.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (BusinessObjects.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) BusinessObjects.User); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(BusinessObjects.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: userID
func (_m *IUserRepository) GetUserByID(userID string) (BusinessObjects.User, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 BusinessObjects.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (BusinessObjects.User, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) BusinessObjects.User); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(BusinessObjects.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByToken provides a mock function with given fields: token
func (_m *IUserRepository) GetUserByToken(token string) (BusinessObjects.User, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByToken")
	}

	var r0 BusinessObjects.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (BusinessObjects.User, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) BusinessObjects.User); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(BusinessObjects.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetToken provides a mock function with given fields: user, token
func (_m *IUserRepository) SetToken(user *BusinessObjects.User, token string) error {
	ret := _m.Called(user, token)

	if len(ret) == 0 {
		panic("no return value specified for SetToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*BusinessObjects.User, string) error); ok {
		r0 = rf(user, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreToken provides a mock function with given fields: user, token
func (_m *IUserRepository) StoreToken(user *BusinessObjects.User, token string) error {
	ret := _m.Called(user, token)

	if len(ret) == 0 {
		panic("no return value specified for StoreToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*BusinessObjects.User, string) error); ok {
		r0 = rf(user, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: user
func (_m *IUserRepository) UpdateUser(user BusinessObjects.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(BusinessObjects.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyToken provides a mock function with given fields: token
func (_m *IUserRepository) VerifyToken(token string) bool {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for VerifyToken")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewIUserRepository creates a new instance of IUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserRepository {
	mock := &IUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
