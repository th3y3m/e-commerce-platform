// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	BusinessObjects "th3y3m/e-commerce-platform/BusinessObjects"

	Util "th3y3m/e-commerce-platform/Util"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// IShoppingCartService is an autogenerated mock type for the IShoppingCartService type
type IShoppingCartService struct {
	mock.Mock
}

// AddProductToShoppingCart provides a mock function with given fields: userID, productID, quantity
func (_m *IShoppingCartService) AddProductToShoppingCart(userID string, productID string, quantity int) error {
	ret := _m.Called(userID, productID, quantity)

	if len(ret) == 0 {
		panic("no return value specified for AddProductToShoppingCart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, int) error); ok {
		r0 = rf(userID, productID, quantity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClearShoppingCart provides a mock function with given fields: userID
func (_m *IShoppingCartService) ClearShoppingCart(userID string) error {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for ClearShoppingCart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateShoppingCart provides a mock function with given fields: userID
func (_m *IShoppingCartService) CreateShoppingCart(userID string) (BusinessObjects.ShoppingCart, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for CreateShoppingCart")
	}

	var r0 BusinessObjects.ShoppingCart
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (BusinessObjects.ShoppingCart, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) BusinessObjects.ShoppingCart); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(BusinessObjects.ShoppingCart)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCartInCookie provides a mock function with given fields: w, userId
func (_m *IShoppingCartService) DeleteCartInCookie(w http.ResponseWriter, userId string) error {
	ret := _m.Called(w, userId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCartInCookie")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, string) error); ok {
		r0 = rf(w, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteShoppingCart provides a mock function with given fields: id
func (_m *IShoppingCartService) DeleteShoppingCart(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteShoppingCart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUnitItem provides a mock function with given fields: w, r, productId, userId
func (_m *IShoppingCartService) DeleteUnitItem(w http.ResponseWriter, r *http.Request, productId string, userId string) error {
	ret := _m.Called(w, r, productId, userId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUnitItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request, string, string) error); ok {
		r0 = rf(w, r, productId, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllShoppingCarts provides a mock function with given fields:
func (_m *IShoppingCartService) GetAllShoppingCarts() ([]BusinessObjects.ShoppingCart, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllShoppingCarts")
	}

	var r0 []BusinessObjects.ShoppingCart
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]BusinessObjects.ShoppingCart, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []BusinessObjects.ShoppingCart); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]BusinessObjects.ShoppingCart)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCart provides a mock function with given fields: r, userId
func (_m *IShoppingCartService) GetCart(r *http.Request, userId string) ([]BusinessObjects.Item, error) {
	ret := _m.Called(r, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetCart")
	}

	var r0 []BusinessObjects.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request, string) ([]BusinessObjects.Item, error)); ok {
		return rf(r, userId)
	}
	if rf, ok := ret.Get(0).(func(*http.Request, string) []BusinessObjects.Item); ok {
		r0 = rf(r, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]BusinessObjects.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(*http.Request, string) error); ok {
		r1 = rf(r, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaginatedShoppingCartList provides a mock function with given fields: sortBy, cartID, userID, pageIndex, pageSize, status
func (_m *IShoppingCartService) GetPaginatedShoppingCartList(sortBy string, cartID string, userID string, pageIndex int, pageSize int, status *bool) (Util.PaginatedList[BusinessObjects.ShoppingCart], error) {
	ret := _m.Called(sortBy, cartID, userID, pageIndex, pageSize, status)

	if len(ret) == 0 {
		panic("no return value specified for GetPaginatedShoppingCartList")
	}

	var r0 Util.PaginatedList[BusinessObjects.ShoppingCart]
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, int, int, *bool) (Util.PaginatedList[BusinessObjects.ShoppingCart], error)); ok {
		return rf(sortBy, cartID, userID, pageIndex, pageSize, status)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, int, int, *bool) Util.PaginatedList[BusinessObjects.ShoppingCart]); ok {
		r0 = rf(sortBy, cartID, userID, pageIndex, pageSize, status)
	} else {
		r0 = ret.Get(0).(Util.PaginatedList[BusinessObjects.ShoppingCart])
	}

	if rf, ok := ret.Get(1).(func(string, string, string, int, int, *bool) error); ok {
		r1 = rf(sortBy, cartID, userID, pageIndex, pageSize, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetShoppingCartByID provides a mock function with given fields: id
func (_m *IShoppingCartService) GetShoppingCartByID(id string) (BusinessObjects.ShoppingCart, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetShoppingCartByID")
	}

	var r0 BusinessObjects.ShoppingCart
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (BusinessObjects.ShoppingCart, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) BusinessObjects.ShoppingCart); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(BusinessObjects.ShoppingCart)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserShoppingCart provides a mock function with given fields: userID
func (_m *IShoppingCartService) GetUserShoppingCart(userID string) (BusinessObjects.ShoppingCart, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserShoppingCart")
	}

	var r0 BusinessObjects.ShoppingCart
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (BusinessObjects.ShoppingCart, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) BusinessObjects.ShoppingCart); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(BusinessObjects.ShoppingCart)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NumberOfItemsInCart provides a mock function with given fields: userID
func (_m *IShoppingCartService) NumberOfItemsInCart(userID string) (int, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for NumberOfItemsInCart")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NumberOfItemsInCartCookie provides a mock function with given fields: r, userId
func (_m *IShoppingCartService) NumberOfItemsInCartCookie(r *http.Request, userId string) (int, error) {
	ret := _m.Called(r, userId)

	if len(ret) == 0 {
		panic("no return value specified for NumberOfItemsInCartCookie")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request, string) (int, error)); ok {
		return rf(r, userId)
	}
	if rf, ok := ret.Get(0).(func(*http.Request, string) int); ok {
		r0 = rf(r, userId)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(*http.Request, string) error); ok {
		r1 = rf(r, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveFromCart provides a mock function with given fields: w, r, productId, userId
func (_m *IShoppingCartService) RemoveFromCart(w http.ResponseWriter, r *http.Request, productId string, userId string) error {
	ret := _m.Called(w, r, productId, userId)

	if len(ret) == 0 {
		panic("no return value specified for RemoveFromCart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request, string, string) error); ok {
		r0 = rf(w, r, productId, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveProductFromShoppingCart provides a mock function with given fields: userID, productID, quantity
func (_m *IShoppingCartService) RemoveProductFromShoppingCart(userID string, productID string, quantity int) error {
	ret := _m.Called(userID, productID, quantity)

	if len(ret) == 0 {
		panic("no return value specified for RemoveProductFromShoppingCart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, int) error); ok {
		r0 = rf(userID, productID, quantity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveCartToCookieHandler provides a mock function with given fields: w, r, productId, userId
func (_m *IShoppingCartService) SaveCartToCookieHandler(w http.ResponseWriter, r *http.Request, productId string, userId string) error {
	ret := _m.Called(w, r, productId, userId)

	if len(ret) == 0 {
		panic("no return value specified for SaveCartToCookieHandler")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request, string, string) error); ok {
		r0 = rf(w, r, productId, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateShoppingCart provides a mock function with given fields: cart
func (_m *IShoppingCartService) UpdateShoppingCart(cart BusinessObjects.ShoppingCart) error {
	ret := _m.Called(cart)

	if len(ret) == 0 {
		panic("no return value specified for UpdateShoppingCart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(BusinessObjects.ShoppingCart) error); ok {
		r0 = rf(cart)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateShoppingCartStatus provides a mock function with given fields: cartID, status
func (_m *IShoppingCartService) UpdateShoppingCartStatus(cartID string, status bool) error {
	ret := _m.Called(cartID, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateShoppingCartStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(cartID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIShoppingCartService creates a new instance of IShoppingCartService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIShoppingCartService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IShoppingCartService {
	mock := &IShoppingCartService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
