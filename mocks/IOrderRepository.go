// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	BusinessObjects "th3y3m/e-commerce-platform/BusinessObjects"

	Util "th3y3m/e-commerce-platform/Util"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// IOrderRepository is an autogenerated mock type for the IOrderRepository type
type IOrderRepository struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: order
func (_m *IOrderRepository) CreateOrder(order BusinessObjects.Order) error {
	ret := _m.Called(order)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(BusinessObjects.Order) error); ok {
		r0 = rf(order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteOrder provides a mock function with given fields: orderID
func (_m *IOrderRepository) DeleteOrder(orderID string) error {
	ret := _m.Called(orderID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(orderID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllOrders provides a mock function with given fields:
func (_m *IOrderRepository) GetAllOrders() ([]BusinessObjects.Order, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllOrders")
	}

	var r0 []BusinessObjects.Order
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]BusinessObjects.Order, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []BusinessObjects.Order); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]BusinessObjects.Order)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderByID provides a mock function with given fields: orderID
func (_m *IOrderRepository) GetOrderByID(orderID string) (BusinessObjects.Order, error) {
	ret := _m.Called(orderID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderByID")
	}

	var r0 BusinessObjects.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (BusinessObjects.Order, error)); ok {
		return rf(orderID)
	}
	if rf, ok := ret.Get(0).(func(string) BusinessObjects.Order); ok {
		r0 = rf(orderID)
	} else {
		r0 = ret.Get(0).(BusinessObjects.Order)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaginatedOrderList provides a mock function with given fields: sortBy, orderID, customerId, courierId, voucherId, pageIndex, pageSize, startDate, endDate, minPrice, maxPrice, status
func (_m *IOrderRepository) GetPaginatedOrderList(sortBy string, orderID string, customerId string, courierId string, voucherId string, pageIndex int, pageSize int, startDate *time.Time, endDate *time.Time, minPrice *float64, maxPrice *float64, status string) (Util.PaginatedList[BusinessObjects.Order], error) {
	ret := _m.Called(sortBy, orderID, customerId, courierId, voucherId, pageIndex, pageSize, startDate, endDate, minPrice, maxPrice, status)

	if len(ret) == 0 {
		panic("no return value specified for GetPaginatedOrderList")
	}

	var r0 Util.PaginatedList[BusinessObjects.Order]
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, int, int, *time.Time, *time.Time, *float64, *float64, string) (Util.PaginatedList[BusinessObjects.Order], error)); ok {
		return rf(sortBy, orderID, customerId, courierId, voucherId, pageIndex, pageSize, startDate, endDate, minPrice, maxPrice, status)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, int, int, *time.Time, *time.Time, *float64, *float64, string) Util.PaginatedList[BusinessObjects.Order]); ok {
		r0 = rf(sortBy, orderID, customerId, courierId, voucherId, pageIndex, pageSize, startDate, endDate, minPrice, maxPrice, status)
	} else {
		r0 = ret.Get(0).(Util.PaginatedList[BusinessObjects.Order])
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, string, int, int, *time.Time, *time.Time, *float64, *float64, string) error); ok {
		r1 = rf(sortBy, orderID, customerId, courierId, voucherId, pageIndex, pageSize, startDate, endDate, minPrice, maxPrice, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrder provides a mock function with given fields: order
func (_m *IOrderRepository) UpdateOrder(order BusinessObjects.Order) error {
	ret := _m.Called(order)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(BusinessObjects.Order) error); ok {
		r0 = rf(order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIOrderRepository creates a new instance of IOrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IOrderRepository {
	mock := &IOrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
