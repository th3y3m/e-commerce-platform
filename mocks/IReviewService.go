// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	BusinessObjects "th3y3m/e-commerce-platform/BusinessObjects"

	Util "th3y3m/e-commerce-platform/Util"

	mock "github.com/stretchr/testify/mock"
)

// IReviewService is an autogenerated mock type for the IReviewService type
type IReviewService struct {
	mock.Mock
}

// CreateReview provides a mock function with given fields: review
func (_m *IReviewService) CreateReview(review BusinessObjects.NewReview) error {
	ret := _m.Called(review)

	if len(ret) == 0 {
		panic("no return value specified for CreateReview")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(BusinessObjects.NewReview) error); ok {
		r0 = rf(review)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteReview provides a mock function with given fields: reviewID
func (_m *IReviewService) DeleteReview(reviewID string) error {
	ret := _m.Called(reviewID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReview")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(reviewID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllReviews provides a mock function with given fields:
func (_m *IReviewService) GetAllReviews() ([]BusinessObjects.Review, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllReviews")
	}

	var r0 []BusinessObjects.Review
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]BusinessObjects.Review, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []BusinessObjects.Review); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]BusinessObjects.Review)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaginatedReviewList provides a mock function with given fields: sortBy, reviewID, userID, productID, pageIndex, pageSize, minRating, maxRating, status
func (_m *IReviewService) GetPaginatedReviewList(sortBy string, reviewID string, userID string, productID string, pageIndex int, pageSize int, minRating *int, maxRating *int, status *bool) (Util.PaginatedList[BusinessObjects.Review], error) {
	ret := _m.Called(sortBy, reviewID, userID, productID, pageIndex, pageSize, minRating, maxRating, status)

	if len(ret) == 0 {
		panic("no return value specified for GetPaginatedReviewList")
	}

	var r0 Util.PaginatedList[BusinessObjects.Review]
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, int, int, *int, *int, *bool) (Util.PaginatedList[BusinessObjects.Review], error)); ok {
		return rf(sortBy, reviewID, userID, productID, pageIndex, pageSize, minRating, maxRating, status)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, int, int, *int, *int, *bool) Util.PaginatedList[BusinessObjects.Review]); ok {
		r0 = rf(sortBy, reviewID, userID, productID, pageIndex, pageSize, minRating, maxRating, status)
	} else {
		r0 = ret.Get(0).(Util.PaginatedList[BusinessObjects.Review])
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, int, int, *int, *int, *bool) error); ok {
		r1 = rf(sortBy, reviewID, userID, productID, pageIndex, pageSize, minRating, maxRating, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReviewByID provides a mock function with given fields: reviewID
func (_m *IReviewService) GetReviewByID(reviewID string) (BusinessObjects.Review, error) {
	ret := _m.Called(reviewID)

	if len(ret) == 0 {
		panic("no return value specified for GetReviewByID")
	}

	var r0 BusinessObjects.Review
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (BusinessObjects.Review, error)); ok {
		return rf(reviewID)
	}
	if rf, ok := ret.Get(0).(func(string) BusinessObjects.Review); ok {
		r0 = rf(reviewID)
	} else {
		r0 = ret.Get(0).(BusinessObjects.Review)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(reviewID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReview provides a mock function with given fields: reviewId, comment, rating
func (_m *IReviewService) UpdateReview(reviewId string, comment string, rating int) error {
	ret := _m.Called(reviewId, comment, rating)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReview")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, int) error); ok {
		r0 = rf(reviewId, comment, rating)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIReviewService creates a new instance of IReviewService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIReviewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IReviewService {
	mock := &IReviewService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
