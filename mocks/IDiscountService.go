// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	BusinessObjects "th3y3m/e-commerce-platform/BusinessObjects"

	Util "th3y3m/e-commerce-platform/Util"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// IDiscountService is an autogenerated mock type for the IDiscountService type
type IDiscountService struct {
	mock.Mock
}

// CreateDiscount provides a mock function with given fields: DiscountType, DiscountValue, startDate, endDate
func (_m *IDiscountService) CreateDiscount(DiscountType string, DiscountValue float64, startDate time.Time, endDate time.Time) error {
	ret := _m.Called(DiscountType, DiscountValue, startDate, endDate)

	if len(ret) == 0 {
		panic("no return value specified for CreateDiscount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, float64, time.Time, time.Time) error); ok {
		r0 = rf(DiscountType, DiscountValue, startDate, endDate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDiscount provides a mock function with given fields: discountID
func (_m *IDiscountService) DeleteDiscount(discountID string) error {
	ret := _m.Called(discountID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDiscount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(discountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllDiscounts provides a mock function with given fields:
func (_m *IDiscountService) GetAllDiscounts() ([]BusinessObjects.Discount, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllDiscounts")
	}

	var r0 []BusinessObjects.Discount
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]BusinessObjects.Discount, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []BusinessObjects.Discount); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]BusinessObjects.Discount)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDiscountByID provides a mock function with given fields: discountID
func (_m *IDiscountService) GetDiscountByID(discountID string) (BusinessObjects.Discount, error) {
	ret := _m.Called(discountID)

	if len(ret) == 0 {
		panic("no return value specified for GetDiscountByID")
	}

	var r0 BusinessObjects.Discount
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (BusinessObjects.Discount, error)); ok {
		return rf(discountID)
	}
	if rf, ok := ret.Get(0).(func(string) BusinessObjects.Discount); ok {
		r0 = rf(discountID)
	} else {
		r0 = ret.Get(0).(BusinessObjects.Discount)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(discountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaginatedDiscountList provides a mock function with given fields: searchValue, sortBy, pageIndex, pageSize, status
func (_m *IDiscountService) GetPaginatedDiscountList(searchValue string, sortBy string, pageIndex int, pageSize int, status *bool) (Util.PaginatedList[BusinessObjects.Discount], error) {
	ret := _m.Called(searchValue, sortBy, pageIndex, pageSize, status)

	if len(ret) == 0 {
		panic("no return value specified for GetPaginatedDiscountList")
	}

	var r0 Util.PaginatedList[BusinessObjects.Discount]
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int, int, *bool) (Util.PaginatedList[BusinessObjects.Discount], error)); ok {
		return rf(searchValue, sortBy, pageIndex, pageSize, status)
	}
	if rf, ok := ret.Get(0).(func(string, string, int, int, *bool) Util.PaginatedList[BusinessObjects.Discount]); ok {
		r0 = rf(searchValue, sortBy, pageIndex, pageSize, status)
	} else {
		r0 = ret.Get(0).(Util.PaginatedList[BusinessObjects.Discount])
	}

	if rf, ok := ret.Get(1).(func(string, string, int, int, *bool) error); ok {
		r1 = rf(searchValue, sortBy, pageIndex, pageSize, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDiscount provides a mock function with given fields: discountID, discountType, discountValue, startDate, endDate
func (_m *IDiscountService) UpdateDiscount(discountID string, discountType string, discountValue float64, startDate time.Time, endDate time.Time) error {
	ret := _m.Called(discountID, discountType, discountValue, startDate, endDate)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDiscount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, float64, time.Time, time.Time) error); ok {
		r0 = rf(discountID, discountType, discountValue, startDate, endDate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIDiscountService creates a new instance of IDiscountService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIDiscountService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IDiscountService {
	mock := &IDiscountService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
