// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	BusinessObjects "th3y3m/e-commerce-platform/BusinessObjects"

	Util "th3y3m/e-commerce-platform/Util"

	mock "github.com/stretchr/testify/mock"
)

// IFreightRateRepository is an autogenerated mock type for the IFreightRateRepository type
type IFreightRateRepository struct {
	mock.Mock
}

// CreateFreightRate provides a mock function with given fields: rate
func (_m *IFreightRateRepository) CreateFreightRate(rate BusinessObjects.FreightRate) error {
	ret := _m.Called(rate)

	if len(ret) == 0 {
		panic("no return value specified for CreateFreightRate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(BusinessObjects.FreightRate) error); ok {
		r0 = rf(rate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteFreightRate provides a mock function with given fields: rateID
func (_m *IFreightRateRepository) DeleteFreightRate(rateID string) error {
	ret := _m.Called(rateID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFreightRate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(rateID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllFreightRates provides a mock function with given fields:
func (_m *IFreightRateRepository) GetAllFreightRates() ([]BusinessObjects.FreightRate, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllFreightRates")
	}

	var r0 []BusinessObjects.FreightRate
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]BusinessObjects.FreightRate, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []BusinessObjects.FreightRate); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]BusinessObjects.FreightRate)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFreightRateByCourierID provides a mock function with given fields: courierID
func (_m *IFreightRateRepository) GetFreightRateByCourierID(courierID string) ([]BusinessObjects.FreightRate, error) {
	ret := _m.Called(courierID)

	if len(ret) == 0 {
		panic("no return value specified for GetFreightRateByCourierID")
	}

	var r0 []BusinessObjects.FreightRate
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]BusinessObjects.FreightRate, error)); ok {
		return rf(courierID)
	}
	if rf, ok := ret.Get(0).(func(string) []BusinessObjects.FreightRate); ok {
		r0 = rf(courierID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]BusinessObjects.FreightRate)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(courierID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFreightRateByID provides a mock function with given fields: rateID
func (_m *IFreightRateRepository) GetFreightRateByID(rateID string) (BusinessObjects.FreightRate, error) {
	ret := _m.Called(rateID)

	if len(ret) == 0 {
		panic("no return value specified for GetFreightRateByID")
	}

	var r0 BusinessObjects.FreightRate
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (BusinessObjects.FreightRate, error)); ok {
		return rf(rateID)
	}
	if rf, ok := ret.Get(0).(func(string) BusinessObjects.FreightRate); ok {
		r0 = rf(rateID)
	} else {
		r0 = ret.Get(0).(BusinessObjects.FreightRate)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(rateID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaginatedFreightRateList provides a mock function with given fields: searchValue, sortBy, courierID, pageIndex, pageSize, status
func (_m *IFreightRateRepository) GetPaginatedFreightRateList(searchValue string, sortBy string, courierID string, pageIndex int, pageSize int, status *bool) (Util.PaginatedList[BusinessObjects.FreightRate], error) {
	ret := _m.Called(searchValue, sortBy, courierID, pageIndex, pageSize, status)

	if len(ret) == 0 {
		panic("no return value specified for GetPaginatedFreightRateList")
	}

	var r0 Util.PaginatedList[BusinessObjects.FreightRate]
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, int, int, *bool) (Util.PaginatedList[BusinessObjects.FreightRate], error)); ok {
		return rf(searchValue, sortBy, courierID, pageIndex, pageSize, status)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, int, int, *bool) Util.PaginatedList[BusinessObjects.FreightRate]); ok {
		r0 = rf(searchValue, sortBy, courierID, pageIndex, pageSize, status)
	} else {
		r0 = ret.Get(0).(Util.PaginatedList[BusinessObjects.FreightRate])
	}

	if rf, ok := ret.Get(1).(func(string, string, string, int, int, *bool) error); ok {
		r1 = rf(searchValue, sortBy, courierID, pageIndex, pageSize, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFreightRate provides a mock function with given fields: rate
func (_m *IFreightRateRepository) UpdateFreightRate(rate BusinessObjects.FreightRate) error {
	ret := _m.Called(rate)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFreightRate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(BusinessObjects.FreightRate) error); ok {
		r0 = rf(rate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIFreightRateRepository creates a new instance of IFreightRateRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIFreightRateRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IFreightRateRepository {
	mock := &IFreightRateRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
