// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	BusinessObjects "th3y3m/e-commerce-platform/BusinessObjects"

	Util "th3y3m/e-commerce-platform/Util"

	mock "github.com/stretchr/testify/mock"
)

// IProductRepository is an autogenerated mock type for the IProductRepository type
type IProductRepository struct {
	mock.Mock
}

// CreateProduct provides a mock function with given fields: product
func (_m *IProductRepository) CreateProduct(product BusinessObjects.Product) error {
	ret := _m.Called(product)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(BusinessObjects.Product) error); ok {
		r0 = rf(product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProduct provides a mock function with given fields: productID
func (_m *IProductRepository) DeleteProduct(productID string) error {
	ret := _m.Called(productID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllProducts provides a mock function with given fields:
func (_m *IProductRepository) GetAllProducts() ([]BusinessObjects.Product, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllProducts")
	}

	var r0 []BusinessObjects.Product
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]BusinessObjects.Product, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []BusinessObjects.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]BusinessObjects.Product)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaginatedProductList provides a mock function with given fields: searchValue, sortBy, productID, sellerID, categoryID, pageIndex, pageSize, status
func (_m *IProductRepository) GetPaginatedProductList(searchValue string, sortBy string, productID string, sellerID string, categoryID string, pageIndex int, pageSize int, status *bool) (Util.PaginatedList[BusinessObjects.Product], error) {
	ret := _m.Called(searchValue, sortBy, productID, sellerID, categoryID, pageIndex, pageSize, status)

	if len(ret) == 0 {
		panic("no return value specified for GetPaginatedProductList")
	}

	var r0 Util.PaginatedList[BusinessObjects.Product]
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, int, int, *bool) (Util.PaginatedList[BusinessObjects.Product], error)); ok {
		return rf(searchValue, sortBy, productID, sellerID, categoryID, pageIndex, pageSize, status)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, int, int, *bool) Util.PaginatedList[BusinessObjects.Product]); ok {
		r0 = rf(searchValue, sortBy, productID, sellerID, categoryID, pageIndex, pageSize, status)
	} else {
		r0 = ret.Get(0).(Util.PaginatedList[BusinessObjects.Product])
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, string, int, int, *bool) error); ok {
		r1 = rf(searchValue, sortBy, productID, sellerID, categoryID, pageIndex, pageSize, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductByID provides a mock function with given fields: productID
func (_m *IProductRepository) GetProductByID(productID string) (BusinessObjects.Product, error) {
	ret := _m.Called(productID)

	if len(ret) == 0 {
		panic("no return value specified for GetProductByID")
	}

	var r0 BusinessObjects.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (BusinessObjects.Product, error)); ok {
		return rf(productID)
	}
	if rf, ok := ret.Get(0).(func(string) BusinessObjects.Product); ok {
		r0 = rf(productID)
	} else {
		r0 = ret.Get(0).(BusinessObjects.Product)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProduct provides a mock function with given fields: product
func (_m *IProductRepository) UpdateProduct(product BusinessObjects.Product) error {
	ret := _m.Called(product)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(BusinessObjects.Product) error); ok {
		r0 = rf(product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIProductRepository creates a new instance of IProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIProductRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IProductRepository {
	mock := &IProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
